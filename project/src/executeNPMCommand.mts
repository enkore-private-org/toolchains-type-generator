import {spawn} from "./spawn.mts"
import {resolvePathSync, tmpfileSync, writeAtomicFileSync, removeSync} from "@aniojs/node-fs"
import {chmodSync} from "node:fs"

type Options = {
	secretsDir: string
	token?: {
		anioNPMRegistryToken?: string
		npmRegistryToken?: string
	}
	cwd?: string
}

export async function executeNPMCommand(
	options: Options,
	args: string[]
) {
	const npmArgs = [...args]
	const resolvedSecretsDir = resolvePathSync(options.secretsDir, ["regularDir"])

	let npmConfig = `
# DO NOT EDIT THIS FILE
# 0b7eb12e-da82-4778-8b0d-e6bf5ec1c231
registry="https://registry.npmjs.org/"
@asint:registry="https://npm-registry.anio.software/"
@asint-types:registry="https://npm-registry.anio.software/"
//npm-registry.anio.software/:keyfile=${str(`${resolvedSecretsDir}/npm_client.pkey`)}
//npm-registry.anio.software/:certfile=${str(`${resolvedSecretsDir}/npm_client.cert`)}
`

	if (options.token?.anioNPMRegistryToken) {
		npmConfig += `//npm-registry.anio.software/:_authToken=${str(options.token.anioNPMRegistryToken)}\n`
	}

	if (options.token?.npmRegistryToken) {
		npmConfig += `//registry.npmjs.org/:_authToken=${str(options.token.npmRegistryToken)}\n`
	}

	const tmpNpmConfigFile = tmpfileSync()

	chmodSync(tmpNpmConfigFile, 0o600)
	writeAtomicFileSync(tmpNpmConfigFile, npmConfig, {
		createParents: false,
		mode: 0o600
	})

	npmArgs.push("--userconfig")
	npmArgs.push(tmpNpmConfigFile)

	try {
		console.log("executing", npmArgs)

		return await spawn("npm", npmArgs, options.cwd)
	} finally {
		removeSync(tmpNpmConfigFile)
	}

	function str(v: string): string {
		return JSON.stringify(v)
	}
}
